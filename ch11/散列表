直接寻址表
	当关键词全域U比较小时
	插入、删除、查找只需O(1)时间
散列表
	当全域比较大时，分配大表浪费时间，采用散列表
	解决冲突的方法有：链接法、开放寻址法
	链接法：
		为了更快的删除元素，将链表设置为双向链表
		n个元素，m个槽位，查找的平均时间为θ(1+n/m)
		当n、m成正比时，所有散列操作均可在O(1)时间完成
散列函数
	满足均匀散列假设，将相近符号散列到不同槽中
	除法散列表：
		h(k) = k mod m
		m的选择很关键，常选不太接近2的整数幂的素数
	乘法散列表：
		h(k) = floor(m(kA mod 1))
		m的选择不是特别关键，m可为2的某个幂次，A为0到1之间的常数。
	全域散列法：
		随机选择散列函数，使之独立于要存储的关键字
		*设计一个全域散列函数类
开放寻址法
	通过计算获取槽序列，不使用指针，从而有更多空间存储槽。
	删除关键词操作比较复杂，删除k，则k之后关键词无法获得。在有删除应用时，常用链表法。
	均匀散列：每个探查序列等可能的为m！种排列的任何一种。实际中采用近似方法。
		线性探查：h(k,i) = (h'(k)+i)mod m。 一次群集：连续槽不断增加，查找时间也增加。
		二次探查：h(k,i) = (h'(k)+c1i + c2i^2)mod m。二次群集
		*双重散列：最好的方法
完全散列
	优异的平均情况性能。关键词集合为静态时，有出色的最坏情况性能
	二次散列表的大小为槽中关键字数的平方。
